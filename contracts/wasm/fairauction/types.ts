// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"

export class Auction {
    color        : wasmlib.ScColor = new wasmlib.ScColor(0); // color of tokens for sale
    creator      : wasmlib.ScAgentID = new wasmlib.ScAgentID(); // issuer of start_auction transaction
    deposit      : i64 = 0;          // deposit by auction owner to cover the SC fees
    description  : string = "";      // auction description
    duration     : i32 = 0;          // auction duration in minutes
    highestBid   : i64 = 0;          // the current highest bid amount
    highestBidder: wasmlib.ScAgentID = new wasmlib.ScAgentID(); // the current highest bidder
    minimumBid   : i64 = 0;          // minimum bid amount
    numTokens    : i64 = 0;          // number of tokens for sale
    ownerMargin  : i64 = 0;          // auction owner's margin in promilles
    whenStarted  : i64 = 0;          // timestamp when auction started

    static fromBytes(bytes: u8[]): Auction {
        let decode = new wasmlib.BytesDecoder(bytes);
        let data = new Auction();
        data.color = decode.color();
        data.creator = decode.agentID();
        data.deposit = decode.int64();
        data.description = decode.string();
        data.duration = decode.int32();
        data.highestBid = decode.int64();
        data.highestBidder = decode.agentID();
        data.minimumBid = decode.int64();
        data.numTokens = decode.int64();
        data.ownerMargin = decode.int64();
        data.whenStarted = decode.int64();
        decode.close();
        return data;
    }

    bytes(): u8[] {
        return new wasmlib.BytesEncoder().
            color(this.color).
            agentID(this.creator).
            int64(this.deposit).
            string(this.description).
            int32(this.duration).
            int64(this.highestBid).
            agentID(this.highestBidder).
            int64(this.minimumBid).
            int64(this.numTokens).
            int64(this.ownerMargin).
            int64(this.whenStarted).
            data();
    }
}

export class ImmutableAuction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    value(): Auction {
        return Auction.fromBytes(wasmlib.getBytes(this.objID, this.keyID,wasmlib. TYPE_BYTES));
    }
}

export class MutableAuction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    setValue(value: Auction): void {
        wasmlib.setBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES, value.bytes());
    }

    value(): Auction {
        return Auction.fromBytes(wasmlib.getBytes(this.objID, this.keyID,wasmlib. TYPE_BYTES));
    }
}

export class Bid {
    amount   : i64 = 0; // cumulative amount of bids from same bidder
    index    : i32 = 0; // index of bidder in bidder list
    timestamp: i64 = 0; // timestamp of most recent bid

    static fromBytes(bytes: u8[]): Bid {
        let decode = new wasmlib.BytesDecoder(bytes);
        let data = new Bid();
        data.amount = decode.int64();
        data.index = decode.int32();
        data.timestamp = decode.int64();
        decode.close();
        return data;
    }

    bytes(): u8[] {
        return new wasmlib.BytesEncoder().
            int64(this.amount).
            int32(this.index).
            int64(this.timestamp).
            data();
    }
}

export class ImmutableBid {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    value(): Bid {
        return Bid.fromBytes(wasmlib.getBytes(this.objID, this.keyID,wasmlib. TYPE_BYTES));
    }
}

export class MutableBid {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    setValue(value: Bid): void {
        wasmlib.setBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES, value.bytes());
    }

    value(): Bid {
        return Bid.fromBytes(wasmlib.getBytes(this.objID, this.keyID,wasmlib. TYPE_BYTES));
    }
}
