// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"
import * as sc from "./index";

export class CallOnChainCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncCallOnChain);
    params: sc.MutableCallOnChainParams = new sc.MutableCallOnChainParams();
    results: sc.ImmutableCallOnChainResults = new sc.ImmutableCallOnChainResults();
}

export class CallOnChainContext {
    params: sc.ImmutableCallOnChainParams = new sc.ImmutableCallOnChainParams();
    results: sc.MutableCallOnChainResults = new sc.MutableCallOnChainResults();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class CheckContextFromFullEPCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncCheckContextFromFullEP);
    params: sc.MutableCheckContextFromFullEPParams = new sc.MutableCheckContextFromFullEPParams();
}

export class CheckContextFromFullEPContext {
    params: sc.ImmutableCheckContextFromFullEPParams = new sc.ImmutableCheckContextFromFullEPParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class DoNothingCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDoNothing);
}

export class DoNothingContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class GetMintedSupplyCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncGetMintedSupply);
    results: sc.ImmutableGetMintedSupplyResults = new sc.ImmutableGetMintedSupplyResults();
}

export class GetMintedSupplyContext {
    results: sc.MutableGetMintedSupplyResults = new sc.MutableGetMintedSupplyResults();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class IncCounterCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncIncCounter);
}

export class IncCounterContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class InitCall {
    func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
    params: sc.MutableInitParams = new sc.MutableInitParams();
}

export class InitContext {
    params: sc.ImmutableInitParams = new sc.ImmutableInitParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class PassTypesFullCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncPassTypesFull);
    params: sc.MutablePassTypesFullParams = new sc.MutablePassTypesFullParams();
}

export class PassTypesFullContext {
    params: sc.ImmutablePassTypesFullParams = new sc.ImmutablePassTypesFullParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class RunRecursionCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRunRecursion);
    params: sc.MutableRunRecursionParams = new sc.MutableRunRecursionParams();
    results: sc.ImmutableRunRecursionResults = new sc.ImmutableRunRecursionResults();
}

export class RunRecursionContext {
    params: sc.ImmutableRunRecursionParams = new sc.ImmutableRunRecursionParams();
    results: sc.MutableRunRecursionResults = new sc.MutableRunRecursionResults();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class SendToAddressCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSendToAddress);
    params: sc.MutableSendToAddressParams = new sc.MutableSendToAddressParams();
}

export class SendToAddressContext {
    params: sc.ImmutableSendToAddressParams = new sc.ImmutableSendToAddressParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class SetIntCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetInt);
    params: sc.MutableSetIntParams = new sc.MutableSetIntParams();
}

export class SetIntContext {
    params: sc.ImmutableSetIntParams = new sc.ImmutableSetIntParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class SpawnCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSpawn);
    params: sc.MutableSpawnParams = new sc.MutableSpawnParams();
}

export class SpawnContext {
    params: sc.ImmutableSpawnParams = new sc.ImmutableSpawnParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestBlockContext1Call {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestBlockContext1);
}

export class TestBlockContext1Context {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestBlockContext2Call {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestBlockContext2);
}

export class TestBlockContext2Context {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestCallPanicFullEPCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestCallPanicFullEP);
}

export class TestCallPanicFullEPContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestCallPanicViewEPFromFullCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestCallPanicViewEPFromFull);
}

export class TestCallPanicViewEPFromFullContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestChainOwnerIDFullCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestChainOwnerIDFull);
    results: sc.ImmutableTestChainOwnerIDFullResults = new sc.ImmutableTestChainOwnerIDFullResults();
}

export class TestChainOwnerIDFullContext {
    results: sc.MutableTestChainOwnerIDFullResults = new sc.MutableTestChainOwnerIDFullResults();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestEventLogDeployCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestEventLogDeploy);
}

export class TestEventLogDeployContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestEventLogEventDataCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestEventLogEventData);
}

export class TestEventLogEventDataContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestEventLogGenericDataCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestEventLogGenericData);
    params: sc.MutableTestEventLogGenericDataParams = new sc.MutableTestEventLogGenericDataParams();
}

export class TestEventLogGenericDataContext {
    params: sc.ImmutableTestEventLogGenericDataParams = new sc.ImmutableTestEventLogGenericDataParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class TestPanicFullEPCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTestPanicFullEP);
}

export class TestPanicFullEPContext {
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class WithdrawToChainCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncWithdrawToChain);
    params: sc.MutableWithdrawToChainParams = new sc.MutableWithdrawToChainParams();
}

export class WithdrawToChainContext {
    params: sc.ImmutableWithdrawToChainParams = new sc.ImmutableWithdrawToChainParams();
    state: sc.MutableTestCoreState = new sc.MutableTestCoreState();
}

export class CheckContextFromViewEPCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewCheckContextFromViewEP);
    params: sc.MutableCheckContextFromViewEPParams = new sc.MutableCheckContextFromViewEPParams();
}

export class CheckContextFromViewEPContext {
    params: sc.ImmutableCheckContextFromViewEPParams = new sc.ImmutableCheckContextFromViewEPParams();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class FibonacciCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewFibonacci);
    params: sc.MutableFibonacciParams = new sc.MutableFibonacciParams();
    results: sc.ImmutableFibonacciResults = new sc.ImmutableFibonacciResults();
}

export class FibonacciContext {
    params: sc.ImmutableFibonacciParams = new sc.ImmutableFibonacciParams();
    results: sc.MutableFibonacciResults = new sc.MutableFibonacciResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class GetCounterCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetCounter);
    results: sc.ImmutableGetCounterResults = new sc.ImmutableGetCounterResults();
}

export class GetCounterContext {
    results: sc.MutableGetCounterResults = new sc.MutableGetCounterResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class GetIntCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetInt);
    params: sc.MutableGetIntParams = new sc.MutableGetIntParams();
    results: sc.ImmutableGetIntResults = new sc.ImmutableGetIntResults();
}

export class GetIntContext {
    params: sc.ImmutableGetIntParams = new sc.ImmutableGetIntParams();
    results: sc.MutableGetIntResults = new sc.MutableGetIntResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class GetStringValueCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetStringValue);
    params: sc.MutableGetStringValueParams = new sc.MutableGetStringValueParams();
    results: sc.ImmutableGetStringValueResults = new sc.ImmutableGetStringValueResults();
}

export class GetStringValueContext {
    params: sc.ImmutableGetStringValueParams = new sc.ImmutableGetStringValueParams();
    results: sc.MutableGetStringValueResults = new sc.MutableGetStringValueResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class JustViewCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewJustView);
}

export class JustViewContext {
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class PassTypesViewCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewPassTypesView);
    params: sc.MutablePassTypesViewParams = new sc.MutablePassTypesViewParams();
}

export class PassTypesViewContext {
    params: sc.ImmutablePassTypesViewParams = new sc.ImmutablePassTypesViewParams();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class TestCallPanicViewEPFromViewCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTestCallPanicViewEPFromView);
}

export class TestCallPanicViewEPFromViewContext {
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class TestChainOwnerIDViewCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTestChainOwnerIDView);
    results: sc.ImmutableTestChainOwnerIDViewResults = new sc.ImmutableTestChainOwnerIDViewResults();
}

export class TestChainOwnerIDViewContext {
    results: sc.MutableTestChainOwnerIDViewResults = new sc.MutableTestChainOwnerIDViewResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class TestPanicViewEPCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTestPanicViewEP);
}

export class TestPanicViewEPContext {
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class TestSandboxCallCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTestSandboxCall);
    results: sc.ImmutableTestSandboxCallResults = new sc.ImmutableTestSandboxCallResults();
}

export class TestSandboxCallContext {
    results: sc.MutableTestSandboxCallResults = new sc.MutableTestSandboxCallResults();
    state: sc.ImmutableTestCoreState = new sc.ImmutableTestCoreState();
}

export class ScFuncs {

    static callOnChain(ctx: wasmlib.ScFuncCallContext): CallOnChainCall {
        let f = new CallOnChainCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static checkContextFromFullEP(ctx: wasmlib.ScFuncCallContext): CheckContextFromFullEPCall {
        let f = new CheckContextFromFullEPCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static doNothing(ctx: wasmlib.ScFuncCallContext): DoNothingCall {
        let f = new DoNothingCall();
        return f;
    }

    static getMintedSupply(ctx: wasmlib.ScFuncCallContext): GetMintedSupplyCall {
        let f = new GetMintedSupplyCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static incCounter(ctx: wasmlib.ScFuncCallContext): IncCounterCall {
        let f = new IncCounterCall();
        return f;
    }

    static init(ctx: wasmlib.ScFuncCallContext): InitCall {
        let f = new InitCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static passTypesFull(ctx: wasmlib.ScFuncCallContext): PassTypesFullCall {
        let f = new PassTypesFullCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static runRecursion(ctx: wasmlib.ScFuncCallContext): RunRecursionCall {
        let f = new RunRecursionCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static sendToAddress(ctx: wasmlib.ScFuncCallContext): SendToAddressCall {
        let f = new SendToAddressCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setInt(ctx: wasmlib.ScFuncCallContext): SetIntCall {
        let f = new SetIntCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static spawn(ctx: wasmlib.ScFuncCallContext): SpawnCall {
        let f = new SpawnCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static testBlockContext1(ctx: wasmlib.ScFuncCallContext): TestBlockContext1Call {
        let f = new TestBlockContext1Call();
        return f;
    }

    static testBlockContext2(ctx: wasmlib.ScFuncCallContext): TestBlockContext2Call {
        let f = new TestBlockContext2Call();
        return f;
    }

    static testCallPanicFullEP(ctx: wasmlib.ScFuncCallContext): TestCallPanicFullEPCall {
        let f = new TestCallPanicFullEPCall();
        return f;
    }

    static testCallPanicViewEPFromFull(ctx: wasmlib.ScFuncCallContext): TestCallPanicViewEPFromFullCall {
        let f = new TestCallPanicViewEPFromFullCall();
        return f;
    }

    static testChainOwnerIDFull(ctx: wasmlib.ScFuncCallContext): TestChainOwnerIDFullCall {
        let f = new TestChainOwnerIDFullCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static testEventLogDeploy(ctx: wasmlib.ScFuncCallContext): TestEventLogDeployCall {
        let f = new TestEventLogDeployCall();
        return f;
    }

    static testEventLogEventData(ctx: wasmlib.ScFuncCallContext): TestEventLogEventDataCall {
        let f = new TestEventLogEventDataCall();
        return f;
    }

    static testEventLogGenericData(ctx: wasmlib.ScFuncCallContext): TestEventLogGenericDataCall {
        let f = new TestEventLogGenericDataCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static testPanicFullEP(ctx: wasmlib.ScFuncCallContext): TestPanicFullEPCall {
        let f = new TestPanicFullEPCall();
        return f;
    }

    static withdrawToChain(ctx: wasmlib.ScFuncCallContext): WithdrawToChainCall {
        let f = new WithdrawToChainCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static checkContextFromViewEP(ctx: wasmlib.ScViewCallContext): CheckContextFromViewEPCall {
        let f = new CheckContextFromViewEPCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static fibonacci(ctx: wasmlib.ScViewCallContext): FibonacciCall {
        let f = new FibonacciCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static getCounter(ctx: wasmlib.ScViewCallContext): GetCounterCall {
        let f = new GetCounterCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static getInt(ctx: wasmlib.ScViewCallContext): GetIntCall {
        let f = new GetIntCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static getStringValue(ctx: wasmlib.ScViewCallContext): GetStringValueCall {
        let f = new GetStringValueCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static justView(ctx: wasmlib.ScViewCallContext): JustViewCall {
        let f = new JustViewCall();
        return f;
    }

    static passTypesView(ctx: wasmlib.ScViewCallContext): PassTypesViewCall {
        let f = new PassTypesViewCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static testCallPanicViewEPFromView(ctx: wasmlib.ScViewCallContext): TestCallPanicViewEPFromViewCall {
        let f = new TestCallPanicViewEPFromViewCall();
        return f;
    }

    static testChainOwnerIDView(ctx: wasmlib.ScViewCallContext): TestChainOwnerIDViewCall {
        let f = new TestChainOwnerIDViewCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static testPanicViewEP(ctx: wasmlib.ScViewCallContext): TestPanicViewEPCall {
        let f = new TestPanicViewEPCall();
        return f;
    }

    static testSandboxCall(ctx: wasmlib.ScViewCallContext): TestSandboxCallCall {
        let f = new TestSandboxCallCall();
        f.func.setPtrs(null, f.results);
        return f;
    }
}
