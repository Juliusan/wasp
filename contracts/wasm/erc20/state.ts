// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"
import * as sc from "./index";

export class MapAgentIDToImmutableAllowancesForAgent {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getAllowancesForAgent(key: wasmlib.ScAgentID): sc.ImmutableAllowancesForAgent {
        let subID = wasmlib.getObjectID(this.objID, key.getKeyID(), wasmlib.TYPE_MAP);
        return new sc.ImmutableAllowancesForAgent(subID);
    }
}

export class ImmutableErc20State extends wasmlib.ScMapID {

    allAllowances(): sc.MapAgentIDToImmutableAllowancesForAgent {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateAllAllowances], wasmlib.TYPE_MAP);
        return new sc.MapAgentIDToImmutableAllowancesForAgent(mapID);
    }

    balances(): sc.MapAgentIDToImmutableInt64 {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateBalances], wasmlib.TYPE_MAP);
        return new sc.MapAgentIDToImmutableInt64(mapID);
    }

    supply(): wasmlib.ScImmutableInt64 {
        return new wasmlib.ScImmutableInt64(this.mapID, sc.idxMap[sc.IdxStateSupply]);
    }
}

export class MapAgentIDToMutableAllowancesForAgent {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID)
    }

    getAllowancesForAgent(key: wasmlib.ScAgentID): sc.MutableAllowancesForAgent {
        let subID = wasmlib.getObjectID(this.objID, key.getKeyID(), wasmlib.TYPE_MAP);
        return new sc.MutableAllowancesForAgent(subID);
    }
}

export class MutableErc20State extends wasmlib.ScMapID {

    allAllowances(): sc.MapAgentIDToMutableAllowancesForAgent {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateAllAllowances], wasmlib.TYPE_MAP);
        return new sc.MapAgentIDToMutableAllowancesForAgent(mapID);
    }

    balances(): sc.MapAgentIDToMutableInt64 {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateBalances], wasmlib.TYPE_MAP);
        return new sc.MapAgentIDToMutableInt64(mapID);
    }

    supply(): wasmlib.ScMutableInt64 {
        return new wasmlib.ScMutableInt64(this.mapID, sc.idxMap[sc.IdxStateSupply]);
    }
}
