// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"
import * as sc from "./index";

export class DivideCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDivide);
}

export class DivideContext {
    state: sc.MutableDividendState = new sc.MutableDividendState();
}

export class InitCall {
    func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
    params: sc.MutableInitParams = new sc.MutableInitParams();
}

export class InitContext {
    params: sc.ImmutableInitParams = new sc.ImmutableInitParams();
    state: sc.MutableDividendState = new sc.MutableDividendState();
}

export class MemberCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncMember);
    params: sc.MutableMemberParams = new sc.MutableMemberParams();
}

export class MemberContext {
    params: sc.ImmutableMemberParams = new sc.ImmutableMemberParams();
    state: sc.MutableDividendState = new sc.MutableDividendState();
}

export class SetOwnerCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetOwner);
    params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams();
}

export class SetOwnerContext {
    params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams();
    state: sc.MutableDividendState = new sc.MutableDividendState();
}

export class GetFactorCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetFactor);
    params: sc.MutableGetFactorParams = new sc.MutableGetFactorParams();
    results: sc.ImmutableGetFactorResults = new sc.ImmutableGetFactorResults();
}

export class GetFactorContext {
    params: sc.ImmutableGetFactorParams = new sc.ImmutableGetFactorParams();
    results: sc.MutableGetFactorResults = new sc.MutableGetFactorResults();
    state: sc.ImmutableDividendState = new sc.ImmutableDividendState();
}

export class GetOwnerCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetOwner);
    results: sc.ImmutableGetOwnerResults = new sc.ImmutableGetOwnerResults();
}

export class GetOwnerContext {
    results: sc.MutableGetOwnerResults = new sc.MutableGetOwnerResults();
    state: sc.ImmutableDividendState = new sc.ImmutableDividendState();
}

export class ScFuncs {

    static divide(ctx: wasmlib.ScFuncCallContext): DivideCall {
        let f = new DivideCall();
        return f;
    }

    static init(ctx: wasmlib.ScFuncCallContext): InitCall {
        let f = new InitCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static member(ctx: wasmlib.ScFuncCallContext): MemberCall {
        let f = new MemberCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setOwner(ctx: wasmlib.ScFuncCallContext): SetOwnerCall {
        let f = new SetOwnerCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static getFactor(ctx: wasmlib.ScViewCallContext): GetFactorCall {
        let f = new GetFactorCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static getOwner(ctx: wasmlib.ScViewCallContext): GetOwnerCall {
        let f = new GetOwnerCall();
        f.func.setPtrs(null, f.results);
        return f;
    }
}
