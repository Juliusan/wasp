// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"
import * as sc from "./index";

export class ArrayOfImmutableAddress {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getAddress(index: i32): wasmlib.ScImmutableAddress {
        return new wasmlib.ScImmutableAddress(this.objID, new wasmlib.Key32(index));
    }
}

export class MapAddressToImmutableInt64 {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getInt64(key: wasmlib.ScAddress): wasmlib.ScImmutableInt64 {
        return new wasmlib.ScImmutableInt64(this.objID, key.getKeyID());
    }
}

export class ImmutableDividendState extends wasmlib.ScMapID {

    memberList(): sc.ArrayOfImmutableAddress {
        let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateMemberList], wasmlib.TYPE_ARRAY|wasmlib.TYPE_ADDRESS);
        return new sc.ArrayOfImmutableAddress(arrID)
    }

    members(): sc.MapAddressToImmutableInt64 {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateMembers], wasmlib.TYPE_MAP);
        return new sc.MapAddressToImmutableInt64(mapID);
    }

    owner(): wasmlib.ScImmutableAgentID {
        return new wasmlib.ScImmutableAgentID(this.mapID, sc.idxMap[sc.IdxStateOwner]);
    }

    totalFactor(): wasmlib.ScImmutableInt64 {
        return new wasmlib.ScImmutableInt64(this.mapID, sc.idxMap[sc.IdxStateTotalFactor]);
    }
}

export class ArrayOfMutableAddress {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getAddress(index: i32): wasmlib.ScMutableAddress {
        return new wasmlib.ScMutableAddress(this.objID, new wasmlib.Key32(index));
    }
}

export class MapAddressToMutableInt64 {
    objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID)
    }

    getInt64(key: wasmlib.ScAddress): wasmlib.ScMutableInt64 {
        return new wasmlib.ScMutableInt64(this.objID, key.getKeyID());
    }
}

export class MutableDividendState extends wasmlib.ScMapID {

    memberList(): sc.ArrayOfMutableAddress {
        let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateMemberList], wasmlib.TYPE_ARRAY|wasmlib.TYPE_ADDRESS);
        return new sc.ArrayOfMutableAddress(arrID)
    }

    members(): sc.MapAddressToMutableInt64 {
        let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateMembers], wasmlib.TYPE_MAP);
        return new sc.MapAddressToMutableInt64(mapID);
    }

    owner(): wasmlib.ScMutableAgentID {
        return new wasmlib.ScMutableAgentID(this.mapID, sc.idxMap[sc.IdxStateOwner]);
    }

    totalFactor(): wasmlib.ScMutableInt64 {
        return new wasmlib.ScMutableInt64(this.mapID, sc.idxMap[sc.IdxStateTotalFactor]);
    }
}
